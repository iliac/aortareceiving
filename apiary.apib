FORMAT: 1A
HOST: http://polls.apiblueprint.org/

# AORTA Message Broker Receiving Messages Rest

Aorta Rest is a simple API allowing tasks to be routed and medical messages to be transferred.

List of services that will be called on the AortaMessageBroker application:

 - Process Request - Task Management Application
   - Create a Process Request               POST   http://aorta:443/api/processrequests
   - Delete a Process Request               DELETE http://aorta:443/api/processrequests/123456
   - Update a Process Request               PUT    http://aorta:443/api/processrequests/123456

 - Tasks - Dynamic Scheduling Application
   - Create a Task                       POST   http://aorta:443/api/tasks
   - Delete a Task                       DELETE http://aorta:443/api/tasks/123456
   - Update a Task                       PUT    http://aorta:443/api/tasks/123456

## Process Requests Collection [/api/processrequests]

The collection of messages that deals with Process Requests.
Process Requests are used as input to create one or multiple tasks.

**POST requests**
 - First request: This message creates a process request.

**POST responses**
 - First POST response: HTTP 1/1 202 Accepted. AortaMessageBroker has been able to parse, route and distribute the message.
 - Second POST response: HTTP 1/1 400 Bad Request, with specific body (see below). AortaMessageBroker was not able to correctly parse the message.
 - Third POST response: HTTP 1/1 404 Not Found, with specific body (see below). AortaMessageBroker was not able to correctly route the message.
 - Fourth POST response: HTTP 1/1 500 Internal Server Error, with specific body (see below). AortaMessageBroker was not able to correctly process the message.

**DELETE requests**
 - First DELETE request: This message deletes a process request.

**PUT requests**
 - Third PUT request: This message updates a process request.
 
### Create a Process Request [POST]

+ Request (application/json)

    + Body
    
            {
                "processId": "aeb7d11b-5588-4de7-822e-bd4a94da4df7",
                "type": "ProcessRequest",
                "description": "Pick up Patient X",
                "taskState": "Requested",
                "creationTime": "2016-03-10T12:34:56.123Z",
                "creator": "Task Manager",
                "taskType": "PatientTransport",
                "priority": "Normal",
                "transportMode": "Rolstoel",
                "transportType": "Terug",
                "processLinks": [{
                    "nextProcessId": "7278b5d1-afb8-4f4b-8141-615dd283c5d4"
                }],
                "personObjects": [{
                    "personId": "24a87862-0e8d-4e5e-8740-da1c818d843f",
                    "identificationMethods": [
                        { "identificationMethod": "OazisPatientId", "identificationKey": "12345678" },
                        { "identificationMethod": "NFC", "identificationKey": "fabdfa2b-16e8-455b-8b60-6b2ea5bffbde" }
                    ],
                    "firstName": "Goedele",
                    "lastName": "Bruynooghe",
                    "birthDate": "1961-05-21",
                    "gender": "V",
                    "location": {
                        "locationId": "2.W01.15a",
                        "name": "The red one",
                        "description": "Wachtruimte NKO"
                    },
                    "roles": ["Patient"]
                }],
                "proposedArrivalTime": "2016-03-11T13:30:00.000Z",
                "proposedArrivalTimeWindow": {
                    "timeWindowStart": "2016-03-11T13:30:00.000Z",
                    "timeWindowEnd": "2016-03-11T13:50:00.000Z"
                },
                "startLocation": {
                    "locationId": "2.W01.15a",
                    "description": "The red one",
                    "name": "Wachtruimte NKO"
                },
                "endLocation": {
                    "locationId": "1.W01.17a",
                    "description": "The blue one",
                    "name": "ReceptionBooth1"
                },
                "tasks": [{
                    "taskId": "76f8f381-4dd6-4e1d-a591-8a4d49ac0bce"
                }]
            }
            
    + Schema
    
            {
                "$schema": "http://json-schema.org/draft-04/schema#",

                "definitions": {
                    "type": {
                        "type": "string",
                        "enum": [ "ProcessRequest", "Task", "Action" ]
                    },
                    "guidId": {
                        "type": "string",
                        "pattern": "[0-9A-Fa-f]{8}[-]?([0-9A-Fa-f]{4}[-]?){3}[0-9A-Fa-f]{12}"
                    },
                    "millisecondTimestampZ": {
                        "type": "string",
                        "pattern": "[12][0-9]{3}-[01][0-9]-[0-3][0-9]T[0-2][0-9]:[0-5][0-9]:[0-5][0-9].[0-9]{3}Z"
                    },
                    "yearsToSecondsDuration": {
                        "type": "string",
                        "pattern": "P((([0-9]*.?[0-9]*)Y)?(([0-9]*.?[0-9]*)M)?(([0-9]*.?[0-9]*)W)?(([0-9]*.?[0-9]*)D)?)?(T(([0-9]*.?[0-9]*)H)?(([0-9]*.?[0-9]*)M)?(([0-9]*.?[0-9]*)S)?)?"
                    },
                    "millisecondTimeWindowZ": {
                        "type": "object",
                        "properties": {
                            "timeWindowStart": { "ref": "#/definitions/millisecondTimestampZ" },
                            "timeWindowEnd": { "ref": "#/definitions/millisecondTimestampZ" }
                        }
                    },
                    "dateOnly": {
                        "type": "string",
                        "pattern": "[12][0-9]{3}-[01][0-9]-[0-3][0-9]"
                    },
                    "gender": {
                        "type": "string",
                        "enum": [ "M", "V", "F", "O", "U" ]
                    },
                    "coordinates": {
                        "type": "string",
                        "pattern": "[0-9].[a-zA-Z]?[a-zA-Z][0-9][0-9].[0-9][0-9][a-z]?"
                    },
                    "location": {
                        "type": "object",
                        "properties": {
                            "locationId": { "$ref": "#/definitions/coordinates" },
                            "name": { "type": "string" },
                            "description": { "type": "string" },
                            "coordinates": { "type": "string" }
                        },
                        "required": ["locationId"]
                    },
                    "creator": {
                        "type": "string",
                        "enum": [ "Aorta Message Broker", "Task Manager", "Notification Engine", "Context Engine", "Scheduling Application", "Wearable" ]
                    },
                    "taskState": {
                        "type": "string",
                        "enum": [ "Requested", "ToSchedule", "Scheduled", "Assigned", "Notified", "Accepted", "InProgress", "Refused", "Timeout", "Unreachable", "Interrupted", "Delayed", "Finished", "Cancelled" ]
                    },
                    "priority": {
                        "type": "string",
                        "enum": [ "Urgent", "High", "Normal", "Low" ]
                    },
                    "taskType": {
                        "type": "string",
                        "enum": [ "PatientTransport", "GoodsTransport" ]
                    },
                    "taskMode": {
                        "type": "string",
                        "enum": ["Afroep", "Herhalend"]
                    },
                    "transportType": {
                        "type": "string",
                        "enum": ["Enkel", "Heen", "Terug"]
                    },
                    "transportMode": {
                        "type": "string",
                        "enum": ["TeVoet", "Rolstoel", "Bed"]
                    },
                    "role": {
                        "type": "string",
                        "enum": [ "Nurse", "Doctor", "Patient", "Technician", "Logistics", "Administrative" ]
                    },
                    "identificationMethod": {
                        "type": "object",
                        "properties": {
                            "identificationMethod": { "type": "string", "enum": [ "OazisPatientId", "NFC" ] },
                            "identificationKey": { "type": "string" }
                        },
                        "required": [ "identificationMethod", "identificationKey" ]
                    },
                    "person": {
                        "type": "object",
                        "properties": {
                            "personId": { "$ref": "#/definitions/guidId" },
                            "firstName": { "type": "string" },
                            "lastName": { "type": "string" },
                            "birthDate": { "$ref": "#/definitions/dateOnly" },
                            "gender": { "$ref": "#/definitions/gender" },
                            "identificationMethods": { "type": "array", "items": {"$ref": "#/definitions/identificationMethod"} },
                            "location": { "$ref": "#/definitions/location" },
                            "roles": { "type": "array", "items": { "$ref": "#/definitions/role" } },
                            "competences": { "type": "array", "items": { "$ref": "#/definitions/competence" } },
                            "isActive": { "type": "boolean" },
                            "actionOptions": {}
                        },
                        "anyOf" : [
                            { "required" : [ "personId", "firstName", "lastName", "birthDate", "gender" ] },
                            { "required" : [ "personId", "identificationMethods" ] }
                        ]
                    },
                    "processLinks": {
                        "type": "object",
                        "properties": {
                            "nextProcessId": { "$ref": "#/definitions/guidId" },
                            "previousProcessId": { "$ref": "#/definitions/guidId" },
                            "requiredPreviousProcessState": { "$ref": "#/definitions/taskState" }
                        },
                        "anyOf" : [
                            { "required" : [ "nextProcessId" ] },
                            { "required" : [ "previousProcessId" ] }
                        ]
                    },
                    "preconditionState": {
                        "type": "string",
                        "enum": [ "Todo", "Done", "Achieved" ]
                    },
                    "precondition": {
                        "type": "object",
                        "properties": {
                            "preconditionId": { "$ref": "#/definitions/guidId" },
                            "description": { "type": "string" },
                            "preconditionState": { "$ref": "#/definitions/preconditionState" }
                        },
                        "required" : [ "preconditionId" ]
                    },
                    "task": {
                        "type": "object",
                        "properties": {
                            "taskId": { "$ref": "#/definitions/guidId" }
                        }
                    }
                },

                "type": "object",
                "required": [ "processId", "type", "taskState", "taskType" ],
                "properties": {
                    "processId": { "$ref": "#/definitions/guidId" },
                    "type": { "$ref": "#/definitions/type" },
                    "description": { "type": "string" },
                    "taskState": { "$ref": "#/definitions/taskState"},
                    "creationTime": { "$ref": "#/definitions/millisecondTimestampZ" },
                    "creator": { "$ref": "#/definitions/creator" },
                    "taskType": { "$ref": "#/definitions/taskType" },
                    "priority": { "$ref": "#/definitions/priority"},
                    "taskMode": { "$ref": "#/definitions/taskMode"},
                    "taskCanStart": { "type": "boolean" },
                    "transportMode": { "$ref": "#/definitions/transportMode" },
                    "transportType": { "$ref": "#/definitions/transportType" },
                    "processLinks": { "type": "array", "items": {"$ref": "#/definitions/processLinks"} },
                    "personObjects": { "type": "array", "items": {"$ref": "#/definitions/person"} },
                    "proposedDepartureTime": { "$ref": "#/definitions/millisecondTimestampZ" },
                    "proposedDepartureTimeWindow": { "$ref": "#/definitions/millisecondTimeWindowZ" },
                    "proposedArrivalTime": { "$ref": "#/definitions/millisecondTimestampZ" },
                    "proposedArrivalTimeWindow": { "$ref": "#/definitions/millisecondTimeWindowZ" },
                    "proposedRecurringInterval": { "$ref": "#/definitions/yearsToSecondsDuration" },
                    "startLocation": { "$ref": "#/definitions/location" },
                    "endLocation": { "$ref": "#/definitions/location" },
                    "responseDeadline": { "$ref": "#/definitions/millisecondTimestampZ" },
                    "preconditions": { "type": "array", "items": {"$ref": "#/definitions/precondition"} },
                    "tasks": { "type": "array", "items": {"$ref": "#/definitions/task"} }
                }
            }

+ Response 202 (application/json)

    + Body
    
            {
                "AortaMessageBrokerInputResponse": "Accepted"
            }

+ Response 400 (application/json)

    + Body
    
            {
                "AortaMessageBrokerInputResponse": "Parsing Error"
            }

+ Response 404 (application/json)

    + Body
    
            {
                "AortaMessageBrokerInputResponse": "Routing Error"
            }

+ Response 500 (application/json)

    + Body
    
            {
                "AortaMessageBrokerInputResponse": "Server Error"
            }

### Delete a Process Request [DELETE]

+ Response 202 (application/json)

### Update a Process Request [PUT]

+ Response 202 (application/json)

## Tasks Collection [/api/tasks]

The collection of messages that deals with Tasks. Tasks are actions that need to be performed by a person.

**POST requests**
 - First POST request: This message creates a task.

**POST responses**
 - First POST response: HTTP 1/1 202 Accepted. AortaMessageBroker has been able to parse, route and distribute the message.
 - Second POST response: HTTP 1/1 400 Bad Request, with specific body (see below). AortaMessageBroker was not able to correctly parse the message.
 - Third POST response: HTTP 1/1 404 Not Found, with specific body (see below). AortaMessageBroker was not able to correctly route the message.
 - Fourth POST response: HTTP 1/1 500 Internal Server Error, with specific body (see below). AortaMessageBroker was not able to correctly process the message.

**DELETE requests**
 - First DELETE request: This message deletes a task.

**PUT requests**
 - First PUT request: This message updates a task.
 
### Create a Task [POST]

+ Request (application/json)

        {
            "MessageType": "CreateTask",
            "Task": {
                "Id": "a6baa2d8-03c8-4743-8f9a-ba633ba0d0e6",
                "ProcessRequestId": "aeb7d11b-5588-4de7-822e-bd4a94da4df7",
                "CreationTime": "20160310",
                "Creator": {
                    "Id": "92ee3b32-14e2-40ea-b2f2-6b4c6a08b3d3",
                    "Type": "System",
                    "FirstName": "Scheduling Application",
                    "LastName": ""
                },
                "Subject": {
                    "Id": "52a39c42-3e69-4940-a348-49bd93790eda",
                    "FirstName": "Jan",
                    "LastName": "Janssens",
                    "IdentificationMethods": [
                        {   "IdentificationMethod": "Wearable" },
                        {   "IdentificationMethod": "DECT" }
                    ],
                    "Location": {
                        "Id": "cf12ce64-3080-4306-b3eb-daf9da8ac373",
                        "Name": "ReceptionBooth1",
                        "Description": "The blue one",
                        "Coordinates": "x;y;z"
                    },
                    "Roles": [
                        {   "Role": "Nurse" }
                    ],
                    "Devices": [
                        {   "Device": "Wearable",
                            "Type": "A5" },
                        {   "Device": "DECT",
                            "Type": "Siemens" }
                    ],
                    "Competences": [
                        {   "Competence": "CarryAbility",
                            "Type": "Transport",
                            "Limit": "10 kg" },
                        {   "Competence": "French",
                            "Type": "Language",
                            "Level": "Good" }
                    ]
                },
                "TaskType": "PatientTransport",
                "Objects": [],
                "StartLocation": {
                    "Id": "cf12ce64-3080-4306-b3eb-daf9da8ac373",
                    "Name": "ReceptionBooth1",
                    "Description": "The blue one",
                    "Coordinates": "x;y;z"
                },
                "EndLocation": {
                    "Id": "a73b7ba2-5a11-4568-9088-5a6326115697",
                    "Name": "Room 123",
                    "Description": "The oval office",
                    "Coordinates": "a;b;c"
                },
                "ResponseDeadline": "20150217.234826.780",
                "Preconditions": [],
                "Actions": [
                    {   "Id": "0ca435c7-ad1b-44fd-8f34-a1aa174fd888",
                        "ActionType": "Pickup",
                        "Subject": {
                            "Id": "52a39c42-3e69-4940-a348-49bd93790eda",
                            "FirstName": "Peter",
                            "LastName": "Jans",
                            "IdentificationMethods": [
                                {   "IdentificationMethod": "Wearable" },
                                {   "IdentificationMethod": "DECT" }
                            ],
                            "Location": {
                                "Id": "cf12ce64-3080-4306-b3eb-daf9da8ac373",
                                "Name": "ReceptionBooth1",
                                "Description": "The blue one",
                                "Coordinates": "x;y;z"
                            },
                            "Roles": [
                                {   "Role": "ManOfManyTrades" },
                                {   "Role": "Hospic" }
                            ],
                            "Devices": [
                                {   "Device": "Wearable",
                                    "Type": "A5" },
                                {   "Device": "DECT",
                                    "Type": "Siemens" }
                            ],
                            "Competences": [
                                {   "Competence": "CarryAbility",
                                    "Type": "Transport",
                                    "Limit": "10 kg" },
                                {   "Competence": "French",
                                    "Type": "Language",
                                    "Level": "Good" }
                            ]
                        },
                        "StartLocation": {
                            "Id": "cf12ce64-3080-4306-b3eb-daf9da8ac373",
                            "Name": "RestRoom1",
                            "Description": "The old one",
                            "Coordinates": "x;y;z"
                        },
                        "EndLocation": {
                            "Id": "a73b7ba2-5a11-4568-9088-5a6326115697",
                            "Name": "ReceptionBooth7",
                            "Description": "The blue one",
                            "Coordinates": "a;b;c"
                        },                        "": "",
                        "EffectiveStartTime": "",
                        "EffectiveEndTime": "",
                        "Preconditions": [],
                        "Status": "Requested",
                        "Priority": "Normal",
                        "Description": "Pick up patient at Reception"
                    },
                    {   "Id": "177114d8-a8eb-48e5-9d38-fe7cdf945d8f",
                        "ActionType": "Delivery",
                        "Subject": {
                            "Id": "52a39c42-3e69-4940-a348-49bd93790eda",
                            "FirstName": "Peter",
                            "LastName": "Jans",
                            "IdentificationMethods": [
                                {   "IdentificationMethod": "Wearable" },
                                {   "IdentificationMethod": "DECT" }
                            ],
                            "Location": {
                                "Id": "cf12ce64-3080-4306-b3eb-daf9da8ac373",
                                "Name": "ReceptionBooth1",
                                "Description": "The blue one",
                                "Coordinates": "x;y;z"
                            },
                            "Roles": [
                                {   "Role": "ManOfManyTrades" },
                                {   "Role": "Hospic" }
                            ],
                            "Devices": [
                                {   "Device": "Wearable",
                                    "Type": "A5" },
                                {   "Device": "DECT",
                                    "Type": "Siemens" }
                            ],
                            "Competences": [
                                {   "Competence": "CarryAbility",
                                    "Type": "Transport",
                                    "Limit": "10 kg" },
                                {   "Competence": "French",
                                    "Type": "Language",
                                    "Level": "Good" }
                            ]
                        },
                        "StartLocation": {
                            "Id": "a73b7ba2-5a11-4568-9088-5a6326115697",
                            "Name": "ReceptionBooth7",
                            "Description": "The blue one",
                            "Coordinates": "a;b;c"
                        },
                        "EndLocation": {
                            "Id": "1be31714-b995-4dfe-80a0-3eede25c5d10",
                            "Name": "Room 123",
                            "Description": "The oval office",
                            "Coordinates": "a;b;c"
                        },                        "": "",
                        "EffectiveStartTime": "",
                        "EffectiveEndTime": "",
                        "Preconditions": [],
                        "Status": "Requested",
                        "Priority": "Normal",
                        "Description": "Deliver a patient to his room"
                    }
                ],
                "Status": "Requested",
                "Priority": "Normal",
                "Description": "Pick up patient at Reception",
                "Mode": "Enabled",
                "DisplayName": "Incoming patient to room",
                "Annotations": [
                    {   "CreationTime": "20150217.133456.780",
                        "Creator": "8d8e96ce-74c6-4dd4-94d6-15af724d6215",
                        "Value": "Scheduled via blue pathway" }
                ]
            }
        }

+ Response 202 (application/json)

    + Headers

            Location: /api/tasks/123456

    + Body
    
            {
                "AortaMessageBrokerOutputResponse": "Accepted"
            }

+ Response 400 (application/json)

    + Headers

            Location: /api/tasks/123456

    + Body
    
            {
                "AortaMessageBrokerOutputResponse": "Parsing Error"
            }

+ Response 404 (application/json)

    + Headers

            Location: /api/tasks/123456

    + Body
    
            {
                "AortaMessageBrokerOutputResponse": "Routing Error"
            }

+ Response 500 (application/json)

    + Headers

            Location: /api/tasks/123456

    + Body
    
            {
                "AortaMessageBrokerInputResponse": "Server Error"
            }

### Delete a Task [DELETE]

+ Response 202 (application/json)

### Update a Task [PUT]

+ Response 202 (application/json)